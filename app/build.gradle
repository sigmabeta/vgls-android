apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jaredsburrows.license'

apply from: "$rootProject.projectDir/di-android.gradle"

if (checkShouldIncludeFirebase()) {
    apply plugin: 'com.google.firebase.firebase-perf'
    apply plugin: 'com.google.firebase.crashlytics'
}

// These actually need to be above the Android block.
// TODO These should be computed outside of Gradle
def computeVersionCode = { ->
    def proc = Runtime.getRuntime().exec("git rev-list --all --count")

    def result = proc.waitFor()
    if (result != 0) {
        return 1 // no git revisions
    }

    // Multiply by 10 so LSB can represent build type, if we ever need NDK libs.
    return (proc.getInputStream().readLines().get(0).toInteger() * 10)
}

def computeVersionName = { ->
    def proc = Runtime.getRuntime().exec("git describe --tags")

    def result = proc.waitFor()
    if (result != 0) {
        return "git-error"
    }

    return proc.getInputStream().readLines().get(0)
}

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.vgleadsheets"

        targetSdkVersion 32
        minSdkVersion 21

        versionCode 1
        versionName "debug"

        testInstrumentationRunner "com.vgleadsheets.VglsTestRunner"
    }

    signingConfigs {
        release {
            String decodedPass = System.getenv("UPLOAD_KEYPASS")

            storeFile file("vgls-upload.jks")
            storePassword decodedPass
            keyAlias System.getenv("UPLOAD_KEY")
            keyPassword decodedPass
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                output.versionCodeOverride = computeVersionCode()
                output.versionNameOverride = computeVersionName()
            }
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = 1.8
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/mvrx_release.kotlin_module', 'META-INF/common_debug.kotlin_module']
        }
    }


    buildFeatures {
        dataBinding true
    }

    testOptions {
        animationsDisabled = true
    }
    lint {
        checkDependencies true
        ignoreTestSources true
    }
    namespace 'com.vgleadsheets'
}

def googlePlayTrack = System.getenv("TRACK")
if (googlePlayTrack != null) {
    apply plugin: 'com.github.triplet.play'

    play {
        track = googlePlayTrack
        artifactDir = file("build/outputs/bundle/release/")
    }
}

dependencies {
    // DI dependencies only
    implementation project(":core:android:conversion")
    implementation project(":core:android:database")
    implementation project(":core:android:images")
    implementation project(":core:android:list")
    implementation project(":core:android:logging")
    implementation project(':core:android:ui-core')
    implementation project(':core:android:ui-components')

    implementation project(":core:android:coroutines")
    implementation project(':core:android:images')
    implementation project(':core:android:repository')
    implementation project(':core:android:resources')
    implementation project(':core:android:storage')

    implementation project(':features:main')

    implementation project(":core:common:debug")
    implementation project(":core:common:network")

    // Debug helper
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"

    def shouldIncludeFirebase = checkShouldIncludeFirebase()
    logger.quiet("Including firebase: $shouldIncludeFirebase")
    if (shouldIncludeFirebase) {
        // Analytics ust be in this module, or else contentprovider init doesn't happen
        implementation "com.google.firebase:firebase-analytics:$firebase_version"
        implementation "com.google.firebase:firebase-crashlytics:$crashlytics_version"

        implementation project(':core:android:firebase')
        implementation project(':core:android:tracking')
    } else {
        implementation project(':core:fake:perf')
        implementation project(':core:fake:tracking')
    }

    // Memory leak detection (Uncomment to enable)
//    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"

    // Junit libs
    testImplementation "junit:junit:$junit_version"

    // UI Test libs
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_core_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_core_version"

    androidTestImplementation "androidx.test:runner:$espresso_runner_version"
    androidTestImplementation "androidx.test:rules:$espresso_runner_version"
}

// Firebase (they said to put it at the bottom)
if (checkShouldIncludeFirebase()) {
    apply plugin: 'com.google.gms.google-services'
}

private static boolean checkShouldIncludeFirebase() {
    return new File("app/google-services.json").exists()
}
