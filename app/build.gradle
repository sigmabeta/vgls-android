apply plugin: 'kotlin-kapt'

if (checkShouldIncludeFirebase()) {
    apply plugin: 'com.google.firebase.firebase-perf'
    apply plugin: 'io.fabric'
}

// These actually need to be above the Android block.
// TODO These should be computed outside of Gradle
def computeVersionCode = { ->
    def proc = Runtime.getRuntime().exec("git rev-list --all --count")

    def result = proc.waitFor()
    if (result != 0) {
        return 1 // no git revisions
    }

    // Multiply by 10 so LSB can represent build type, if we ever need NDK libs.
    return (proc.getInputStream().readLines().get(0).toInteger() * 10)
}

def computeVersionName = { ->
    def proc = Runtime.getRuntime().exec("git describe --tags")

    def result = proc.waitFor()
    if (result != 0) {
        return "git-error"
    }

    return proc.getInputStream().readLines().get(0)
}

android {
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.vgleadsheets"

        targetSdkVersion 29

        versionCode computeVersionCode()
        versionName computeVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            String decodedPass = System.getenv("KEYPASS")

            storeFile file("vgls.jks")
            storePassword decodedPass
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword decodedPass
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    packagingOptions {
        exclude 'META-INF/mvrx_release.kotlin_module'
    }

    lintOptions {
        checkDependencies true
        ignoreTestSources true
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    // Module deps
    implementation project(path: ':repository')
    implementation project(path: ':features:main')
    implementation project(path: ':storage')

    // Kotlin libs
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Debug helper
    implementation "com.facebook.stetho:stetho:$stetho_version"

    // Firebase (must be in app or else contentprovider init doesn't happen)
    if (checkShouldIncludeFirebase()) {
        implementation "com.google.firebase:firebase-analytics:$firebase_version"
        implementation "com.google.firebase:firebase-perf:$firebase_perf_version"
        implementation "com.crashlytics.sdk.android:crashlytics:$crashlytics_version"
    }

    // Junit libs
    testImplementation "junit:junit:$junit_version"

    // Espresso libs
    androidTestImplementation "com.android.support.test:runner:$espresso_runner_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_core_version"

    // Dagger (important: include all 3 of these in modules that use Dagger
    implementation project(path: ':di')
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // AssistedInject Annotation Processors
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assistedinject_version"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assistedinject_version"
}

// Firebase (they said to put it at the bottom)
if (checkShouldIncludeFirebase()) {
    apply plugin: 'com.google.gms.google-services'
}

// This is duplicated in ui-core/build.gradle.
// TODO Not duplicate this in ui-core/build.gradle.
private static boolean checkShouldIncludeFirebase() {
    return new File("app/google-services.json").exists()
}
